{"version":3,"sources":["components/GraphInput/GraphInput.tsx","utils/getTextWidth.ts","utils/parseGraphML.ts","utils/getHVLayout.ts","components/GraphView/GraphView.tsx","pages/TreeHV.tsx","pages/Pages.tsx","App.tsx","index.tsx"],"names":["GraphInput","props","Form","className","Group","Label","Control","as","rows","value","defaultValue","onChange","target","File","accept","files","file","undefined","reader","FileReader","onload","e","result","readAsText","canvas","getTextWidth","text","font","document","createElement","context","getContext","measureText","width","getProp","obj","propName","throwError","prop","Error","parseGraphML","xml","graphJson","graphml","graph","node","edge","nodes","Set","Array","isArray","forEach","nodeName","add","edges","from","has","to","push","getParsedGraph","parse","ignoreAttributes","isRectBetter","rect1","rect2","h","w","Math","abs","getHVNodes","root","rects","Map","dfs","children","get","length","childRect1","childRect2","minEdgeWidth","max","DEFAULT_NODE_RADIUS","NODE_FONT","NODE_TEXT_PADDING_RIGHT","minEdgeHeight","NODE_FONT_SIZE","NODE_TEXT_PADDING_TOP","w1","h1","d","dw","dh","w2","h2","w3","h3","rect3","w4","h4","_rects","sort","set","points","x","y","radius","i","convertRectsToPoints","NODE_FONT_FAMILY","NODE_FONT_SIZE_PX","_GraphView","ref","React","svg","this","draw","remove","minX","Number","POSITIVE_INFINITY","minY","maxX","NEGATIVE_INFINITY","maxY","rightLabelMaxWidth","leftNodeMaxRadius","bottomNodeMaxRadius","entries","min","current","height","d3","append","attr","BASE_PADDING","join","call","on","vis","transform","selectAll","data","values","enter","style","GraphView","withResizeDetector","TreeHV","graphProps","setGraphProps","setGraphPropsDebounced","debounce","setValue","Container","edgesList","map","possibleRoots","delete","next","getHVLayout","Pages","Tabs","defaultActiveKey","Tab","eventKey","title","disabled","App","href","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.38f74b50.chunk.js","sourcesContent":["import \"./GraphInput.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport type GraphInputProps = {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  defaultValue?: string;\r\n};\r\n\r\nexport function GraphInput(props: GraphInputProps) {\r\n  const onChangeFile = ({\r\n    target: { files },\r\n  }: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = files?.[0];\r\n    if (file === undefined) return;\r\n\r\n    var reader = new FileReader();\r\n\r\n    reader.onload = (function (file) {\r\n      return function (e: ProgressEvent<FileReader>) {\r\n        props.onChange(e.target.result as string);\r\n      };\r\n    })(file);\r\n\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <Form className=\"d-flex flex-column h-100 py-1\">\r\n      <Form.Group className=\"graph-input-textarea\">\r\n        <Form.Label className=\"text-center w-100\">\r\n          Введите граф в формате GraphML\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={8}\r\n          value={props.value}\r\n          defaultValue={props.defaultValue}\r\n          onChange={({ target: { value } }) => props.onChange(value)}\r\n        />\r\n      </Form.Group>\r\n      <Form.Group className=\"graph-input-file border-top border-secondary w-100\">\r\n        <Form.File\r\n          className=\"text-center\"\r\n          accept=\"text/xml\"\r\n          onChange={onChangeFile}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n","let canvas: HTMLCanvasElement;\r\n\r\nexport function getTextWidth(text: string, font: string): number {\r\n  if (canvas === undefined) canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  context.font = font;\r\n  const metrics = context.measureText(text);\r\n  return metrics.width;\r\n}\r\n","import { parse } from \"fast-xml-parser\";\r\n\r\ntype GraphMLNode = {\r\n  \"@_id\"?: string;\r\n};\r\n\r\ntype GraphMLEdge = {\r\n  \"@_id\": string;\r\n  \"@_source\": string;\r\n  \"@_target\": string;\r\n};\r\n\r\ntype GraphML = {\r\n  graphml: {\r\n    graph: {\r\n      \"@_id\"?: string;\r\n      edge?: GraphMLEdge | GraphMLEdge[];\r\n      node?: GraphMLNode | GraphMLNode[];\r\n    };\r\n  };\r\n};\r\n\r\ntype Edge = { from: string; to: string };\r\n\r\nexport type Graph = {\r\n  nodes: Set<string>;\r\n  edges: Edge[];\r\n};\r\n\r\nfunction getProp<T>(\r\n  obj: T,\r\n  propName: keyof T,\r\n  throwError: boolean = true\r\n): T[keyof T] {\r\n  const prop = obj[propName];\r\n  if (prop === undefined && throwError) {\r\n    throw Error(`No ${propName} specified for object ${obj}`);\r\n  }\r\n  return prop;\r\n}\r\n\r\nfunction getParsedGraph(graphJson: GraphML): Graph {\r\n  if (graphJson.graphml === undefined) throw Error(\"No graphml tag specified\");\r\n  if (graphJson.graphml.graph === undefined)\r\n    throw Error(\"No graph tag specified\");\r\n  let { node, edge } = graphJson.graphml.graph;\r\n\r\n  const nodes = new Set<string>();\r\n  if (node !== undefined) {\r\n    if (!Array.isArray(node)) node = [node];\r\n    node.forEach((node) => {\r\n      const nodeName = getProp(node, \"@_id\");\r\n      nodes.add(nodeName);\r\n    });\r\n  }\r\n\r\n  const edges: Edge[] = [];\r\n  if (edge !== undefined) {\r\n    if (!Array.isArray(edge)) edge = [edge];\r\n    edge.forEach((edge) => {\r\n      const from = getProp(edge, \"@_source\");\r\n      if (!nodes.has(from)) throw Error(`Node ${from} was not specified`);\r\n      const to = getProp(edge, \"@_target\");\r\n      if (!nodes.has(to)) throw Error(`Node ${to} was not specified`);\r\n\r\n      edges.push({ from, to });\r\n    });\r\n  }\r\n\r\n  return { nodes, edges };\r\n}\r\n\r\nexport function parseGraphML(xml: string): Graph | undefined {\r\n  try {\r\n    const graphJson = parse(xml, { ignoreAttributes: false });\r\n    return getParsedGraph(graphJson);\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n","import { getTextWidth } from \"./getTextWidth\";\r\nimport {\r\n  GraphViewProps,\r\n  Point,\r\n  NODE_FONT_SIZE,\r\n  NODE_FONT,\r\n  NODE_TEXT_PADDING_RIGHT,\r\n  NODE_TEXT_PADDING_TOP,\r\n} from \"src/components\";\r\nimport { Graph } from \"./parseGraphML\";\r\n\r\ntype Delta = {\r\n  dw: number;\r\n  dh: number;\r\n};\r\n\r\ntype Deltas = [Delta, Delta];\r\n\r\ntype Rect = {\r\n  w: number;\r\n  h: number;\r\n  d?: [Delta, Delta];\r\n};\r\n\r\nconst DEFAULT_NODE_RADIUS = 2;\r\nconst MIN_EDGE_LENGTH = 5;\r\n\r\nfunction convertRectsToPoints(\r\n  root: string,\r\n  rects: Map<string, Rect>,\r\n  edges: Map<string, string[]>\r\n): Map<string, Point> {\r\n  const points = new Map<string, Point>();\r\n  function dfs(node: string, x: number, y: number): void {\r\n    points.set(node, { x, y, radius: 1 });\r\n    const children = edges.get(node);\r\n    if (children.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const { d } = rects.get(node);\r\n    children.forEach((node, i) => {\r\n      dfs(node, x + d[i].dw, y + d[i].dh);\r\n    });\r\n  }\r\n\r\n  dfs(root, 0, 0);\r\n\r\n  return points;\r\n}\r\n\r\nfunction isRectBetter(rect1: Rect, rect2: Rect): number {\r\n  return (\r\n    rect1.h * rect1.w - rect2.h * rect2.w ||\r\n    Math.abs(rect1.h - rect1.w) - Math.abs(rect2.h - rect2.w) ||\r\n    rect1.h - rect2.h\r\n  );\r\n}\r\n\r\nfunction getHVNodes(\r\n  root: string,\r\n  edges: Map<string, string[]>\r\n): Map<string, Point> {\r\n  const rects = new Map<string, Rect>();\r\n  function dfs(node: string): void {\r\n    const children = edges.get(node);\r\n    if (children.length === 0) {\r\n      rects.set(node, { w: 0, h: 0 });\r\n      return;\r\n    }\r\n\r\n    children.forEach((node) => dfs(node));\r\n    const childRect1 = rects.get(children[0]);\r\n    const childRect2 =\r\n      children.length === 2 ? rects.get(children[1]) : { w: 0, h: 0 };\r\n\r\n    const minEdgeWidth = Math.max(\r\n      DEFAULT_NODE_RADIUS * 2 + MIN_EDGE_LENGTH,\r\n      getTextWidth(node, NODE_FONT) + NODE_TEXT_PADDING_RIGHT\r\n    );\r\n    const minEdgeHeight = Math.max(\r\n      DEFAULT_NODE_RADIUS * 2 + MIN_EDGE_LENGTH,\r\n      NODE_FONT_SIZE + NODE_TEXT_PADDING_TOP\r\n    );\r\n\r\n    const w1 = Math.max(minEdgeWidth, childRect2.w + 1);\r\n    const h1 = minEdgeHeight;\r\n    const rect1 = {\r\n      w: childRect1.w + w1,\r\n      h: childRect2.h + h1,\r\n      d: [\r\n        { dw: w1, dh: 0 },\r\n        { dw: 0, dh: h1 },\r\n      ] as Deltas,\r\n    }; // 1 - right_width2, 2 - down_1\r\n\r\n    const w2 = minEdgeWidth;\r\n    const h2 = Math.max(minEdgeHeight, childRect1.h + 1);\r\n    const rect2 = {\r\n      w: childRect1.w + w2,\r\n      h: childRect2.h + h2,\r\n      d: [\r\n        { dw: w2, dh: 0 },\r\n        { dw: 0, dh: h2 },\r\n      ] as Deltas,\r\n    }; // 1 - right_1, 2 - down_height1\r\n\r\n    const w3 = Math.max(minEdgeWidth, childRect1.w + 1);\r\n    const h3 = minEdgeHeight;\r\n    const rect3 = {\r\n      w: childRect2.w + w3,\r\n      h: childRect1.h + h3,\r\n      d: [\r\n        { dw: 0, dh: h3 },\r\n        { dw: w3, dh: 0 },\r\n      ] as Deltas,\r\n    }; // 1 - down_1, 2 - right_width1\r\n\r\n    const w4 = minEdgeWidth;\r\n    const h4 = Math.max(minEdgeHeight, childRect2.h + 1);\r\n    const rect4 = {\r\n      w: childRect2.w + w4,\r\n      h: childRect1.h + h4,\r\n      d: [\r\n        { dw: 0, dh: h4 },\r\n        { dw: w4, dh: 0 },\r\n      ] as Deltas,\r\n    }; // 1 - down_height2, 2 - right_1\r\n\r\n    const _rects = [rect1, rect2, rect3, rect4];\r\n    _rects.sort(isRectBetter);\r\n    rects.set(node, _rects[0]);\r\n  }\r\n\r\n  dfs(root);\r\n\r\n  return convertRectsToPoints(root, rects, edges);\r\n}\r\n\r\nexport function getHVLayout(graph: Graph): GraphViewProps {\r\n  const edgesList = new Map<string, string[]>(\r\n    [...graph.nodes.values()].map((node) => [node, []])\r\n  );\r\n  let possibleRoots = new Set(graph.nodes);\r\n  for (const edge of graph.edges) {\r\n    edgesList.get(edge.from).push(edge.to);\r\n    possibleRoots.delete(edge.to);\r\n  }\r\n\r\n  const root = possibleRoots.values().next().value;\r\n  const nodes = getHVNodes(root, edgesList);\r\n  return { nodes, edges: graph.edges };\r\n}\r\n","import * as React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { withResizeDetector } from \"react-resize-detector\";\r\nimport { getTextWidth } from \"src/utils\";\r\n\r\nexport type Point = {\r\n  x: number;\r\n  y: number;\r\n  radius: number;\r\n};\r\nexport type Edge = { from: string; to: string };\r\n\r\nexport interface GraphViewProps {\r\n  nodes: Map<string, Point>;\r\n  edges: Edge[];\r\n}\r\n\r\ninterface GraphViewCollectedProps {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const NODE_FONT_SIZE = 14;\r\nexport const NODE_TEXT_PADDING_RIGHT = 4;\r\nexport const NODE_TEXT_PADDING_TOP = 4;\r\nconst NODE_FONT_FAMILY = \"Bree Serif\";\r\nconst NODE_FONT_SIZE_PX = `${NODE_FONT_SIZE}px`;\r\n\r\nexport const NODE_FONT = `${NODE_FONT_SIZE_PX} ${NODE_FONT_FAMILY}`;\r\n\r\nconst BASE_PADDING = 5;\r\n\r\nclass _GraphView extends React.Component<\r\n  GraphViewProps & Partial<GraphViewCollectedProps>\r\n> {\r\n  private ref = React.createRef<HTMLDivElement>();\r\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.svg.remove();\r\n    this.draw();\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"h-100 w-100\" ref={this.ref} />;\r\n  }\r\n\r\n  private draw() {\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    let rightLabelMaxWidth = Number.NEGATIVE_INFINITY;\r\n    let leftNodeMaxRadius = Number.NEGATIVE_INFINITY;\r\n    let bottomNodeMaxRadius = Number.NEGATIVE_INFINITY;\r\n\r\n    for (const [node, { x, y, radius }] of this.props.nodes.entries()) {\r\n      minX = Math.min(minX, x);\r\n      minY = Math.min(minY, y);\r\n      maxX = Math.max(maxX, x);\r\n      maxY = Math.max(maxY, y);\r\n      if (maxX === x) {\r\n        rightLabelMaxWidth = Math.max(\r\n          rightLabelMaxWidth,\r\n          getTextWidth(node, NODE_FONT)\r\n        );\r\n      }\r\n      if (minX === x) {\r\n        leftNodeMaxRadius = Math.max(leftNodeMaxRadius, radius);\r\n      }\r\n\r\n      if (maxY === y) {\r\n        bottomNodeMaxRadius = Math.max(bottomNodeMaxRadius, radius);\r\n      }\r\n    }\r\n\r\n    const node = this.ref.current;\r\n\r\n    const w = maxX - minX;\r\n    const h = maxY - minY;\r\n\r\n    const { width, height, nodes, edges } = this.props;\r\n\r\n    this.svg = d3\r\n      .select(node)\r\n      .append(\"svg\")\r\n      .attr(\"cursor\", \"move\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\r\n        \"viewBox\",\r\n        [\r\n          minX - leftNodeMaxRadius - BASE_PADDING,\r\n          minY - NODE_FONT_SIZE - BASE_PADDING,\r\n          w + rightLabelMaxWidth + leftNodeMaxRadius + BASE_PADDING * 2,\r\n          h + NODE_FONT_SIZE + bottomNodeMaxRadius + BASE_PADDING * 2,\r\n        ].join(\" \")\r\n      )\r\n      .call(\r\n        d3.zoom<SVGSVGElement, unknown>().on(\"zoom\", function (e) {\r\n          vis.attr(\"transform\", e.transform);\r\n        })\r\n      );\r\n\r\n    const vis = this.svg.append(\"g\");\r\n    vis\r\n      .selectAll(\"circle .nodes\")\r\n      .data(nodes.values())\r\n      .enter()\r\n      .append(\"svg:circle\")\r\n      .attr(\"class\", \"nodes\")\r\n      .attr(\"cx\", (d) => d.x)\r\n      .attr(\"cy\", (d) => d.y)\r\n      .attr(\"r\", (d) => d.radius)\r\n      .attr(\"stroke\", \"black\");\r\n\r\n    vis\r\n      .selectAll(\".line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"x1\", (d) => nodes.get(d.from).x)\r\n      .attr(\"y1\", (d) => nodes.get(d.from).y)\r\n      .attr(\"x2\", (d) => nodes.get(d.to).x)\r\n      .attr(\"y2\", (d) => nodes.get(d.to).y)\r\n      .style(\"stroke\", \"black\");\r\n\r\n    vis\r\n      .selectAll(\"text\")\r\n      .data(nodes.entries())\r\n      .enter()\r\n      .append(\"text\")\r\n      .text(([name]) => {\r\n        return name;\r\n      })\r\n      .attr(\"x\", ([, { x, radius }]) => x + radius)\r\n      .attr(\"y\", ([, { y, radius }]) => y - radius - 1)\r\n      .attr(\"font-family\", NODE_FONT_FAMILY)\r\n      .attr(\"font-size\", NODE_FONT_SIZE_PX)\r\n      .attr(\"fill\", \"black\")\r\n      .attr(\"text-anchor\", \"beginning\");\r\n  }\r\n}\r\n\r\nexport const GraphView = withResizeDetector(_GraphView);\r\n","import * as React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Container\";\r\nimport { debounce } from \"lodash\";\r\nimport { GraphInput, GraphView, GraphViewProps } from \"src/components\";\r\nimport { getHVLayout, parseGraphML } from \"src/utils\";\r\n\r\nexport function TreeHV() {\r\n  const [graphProps, setGraphProps] = React.useState<GraphViewProps>({\r\n    nodes: new Map(),\r\n    edges: [],\r\n  });\r\n\r\n  const setGraphPropsDebounced = debounce(setGraphProps, 500);\r\n\r\n  const [value, setValue] = React.useState(\"\");\r\n  const onChange = (value: string) => {\r\n    setValue(value);\r\n    const graph = parseGraphML(value);\r\n    if (graph === undefined) return;\r\n\r\n    const graphProps = getHVLayout(graph);\r\n    setGraphPropsDebounced(graphProps);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"px-0 mx-0 mw-100 h-100\">\r\n      <Row className=\"main-container px-0 mx-0 mw-100 h-100\">\r\n        <Col className=\"main-left-panel h-100\">\r\n          <GraphInput value={value} onChange={onChange} />\r\n        </Col>\r\n        <Col className=\"main-content px-0 mx-0 h-100\">\r\n          <GraphView {...graphProps} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import \"./Pages.css\";\r\n\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport { TreeHV } from \"./TreeHV\";\r\n\r\nexport function Pages() {\r\n  return (\r\n    <Tabs defaultActiveKey=\"1\">\r\n      <Tab eventKey=\"1\" title=\"Задание 1\">\r\n        <TreeHV />\r\n      </Tab>\r\n      <Tab eventKey=\"2\" title=\"Задание 2\" disabled></Tab>\r\n      <Tab eventKey=\"3\" title=\"Задание 3\" disabled></Tab>\r\n    </Tabs>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Container\";\nimport { Pages } from \"./pages\";\n\nfunction App() {\n  return (\n    <Container className=\"d-flex flex-column border border-secondary px-0 mx-0 mw-100\">\n      <Row className=\"bg-primary mw-100\">\n        <Col>\n          <h1 className=\"text-light\">\n            Сдача заданий по методам визуализации данных\n          </h1>\n          <p className=\"text-light\">Винокуров Сергей Сергеевич</p>\n        </Col>\n      </Row>\n      <Row className=\"content align-self-stretch px-0 mx-0 mw-100\">\n        <Pages />\n      </Row>\n      <Row className=\"footer bg-secondary mw-100\">\n        <Col className=\"position-relative mw-100\">\n          <a\n            className=\"text-light position-absolute end-0\"\n            href=\"https://github.com/pyspice/visualization_10sem\"\n          >\n            Github repo\n          </a>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,  \n    document.getElementById('root')\n);\n"],"sourceRoot":""}